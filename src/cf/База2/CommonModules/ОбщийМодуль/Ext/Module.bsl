
Процедура ЗаписьСправоничкаПриЗаписи(Источник, Отказ) Экспорт
	Если Справочники.ИсходящиеСообщенияВRMQ.НайтиПоРеквизиту("Источник", Источник.ссылка) = Справочники.ИсходящиеСообщенияВRMQ.ПустаяСсылка() Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПотребностьВТМЦ") Тогда
			Если Источник.Статус = перечисления.СтатусыЗаявки.НаИсполнении 
				ИЛИ Источник.Статус = перечисления.СтатусыЗаявки.ГотовКПолучению Тогда
				НовоеСообщение = Справочники.ИсходящиеСообщенияВRMQ.СоздатьЭлемент();
				НовоеСообщение.Источник = Источник.Ссылка; 
				ЗаписьJSON = новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Источник.Ссылка.ПолучитьОбъект()); 
				НовоеСообщение.ТекстСообщения = ЗаписьJSON.Закрыть();                
				НовоеСообщение.ИмяОчереди = "order2"; 
				НомерСообщения = ПолучитьНомер();
				НовоеСообщение.Наименование = "Сообщение " + НомерСообщения;
				НовоеСообщение.Записать();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПотребностьВТМЦ") Тогда
		Если Источник.Статус = перечисления.СтатусыЗаявки.ГотовКПолучению Тогда
			НовоеСообщение = Справочники.ИсходящиеСообщенияВRMQ.СоздатьЭлемент();
			НовоеСообщение.Источник = Источник.Ссылка; 
			ЗаписьJSON = новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Источник.Ссылка.ПолучитьОбъект()); 
			НовоеСообщение.ТекстСообщения = ЗаписьJSON.Закрыть();                
			НовоеСообщение.ИмяОчереди = "order2"; 
			НомерСообщения = ПолучитьНомер();
			НовоеСообщение.Наименование = "Сообщение " + НомерСообщения;
			НовоеСообщение.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция получитьНомер()  
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящиеСообщенияВRMQ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсходящиеСообщенияВRMQ КАК ИсходящиеСообщенияВRMQ";
	Возврат Запрос.Выполнить().Выгрузить().Количество() + 1;
КонецФункции

Процедура ОтправкаСообщенийRMQ() Экспорт  
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты);
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции


Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты)
	
	НастройкаПодключения = Справочники.НастройкиПодключенияRMQ.НайтиПоНаименованию("Основное");
	Попытка
		КлиентКомпоненты.Connect(
			НастройкаПодключения.Адрес,
			НастройкаПодключения.Порт,
			НастройкаПодключения.Логин,
			НастройкаПодключения.Пароль,
			НастройкаПодключения.ВиртуальныйХост);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеСообщенияВRMQ.Ссылка КАК Ссылка,
		|	ИсходящиеСообщенияВRMQ.ВерсияДанных КАК ВерсияДанных,
		|	ИсходящиеСообщенияВRMQ.ПометкаУдаления КАК ПометкаУдаления,
		|	ИсходящиеСообщенияВRMQ.Код КАК Код,
		|	ИсходящиеСообщенияВRMQ.Наименование КАК Наименование,
		|	ИсходящиеСообщенияВRMQ.Отправлено КАК Отправлено,
		|	ИсходящиеСообщенияВRMQ.ИмяОчереди КАК ИмяОчереди,
		|	ИсходящиеСообщенияВRMQ.Источник КАК Источник,
		|	ИсходящиеСообщенияВRMQ.ТекстСообщения КАК ТекстСообщения,
		|	ИсходящиеСообщенияВRMQ.Предопределенный КАК Предопределенный,
		|	ИсходящиеСообщенияВRMQ.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ИсходящиеСообщенияВRMQ КАК ИсходящиеСообщенияВRMQ
		|ГДЕ
		|	ИсходящиеСообщенияВRMQ.ПометкаУдаления = ЛОЖЬ
		|	И ИсходящиеСообщенияВRMQ.Отправлено = ЛОЖЬ";
		
		ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
		Для каждого ИсхСообщение из ТаблицаСообщений Цикл
			
			ИмяОчереди        = ИсхСообщение.ИмяОчереди;
			ТекстСообщения    = ИсхСообщение.ТекстСообщения;
			
			
			КлиентКомпоненты.BasicPublish(
				имяОчереди,
				ИмяОчереди,
				ТекстСообщения,
				1,
				Ложь); 
	        ОтпрСообщение = ИсхСообщение.Ссылка.ПолучитьОбъект();
			ОтпрСообщение.Отправлено = Истина;
			ОтпрСообщение.Записать();
		КонецЦикла;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры


Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(Новый УникальныйИдентификатор);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции  

&НаСервере
Процедура ПрочитатьСообщениеСервер() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты)
	НастройкаПодключения = Справочники.НастройкиПодключенияRMQ.НайтиПоНаименованию("Основное");
	
	Попытка
		КлиентКомпоненты.Connect(
			НастройкаПодключения.Адрес,
			НастройкаПодключения.Порт,
			НастройкаПодключения.Логин,
			НастройкаПодключения.Пароль,
			НастройкаПодключения.ВиртуальныйХост);
		
		
		
		Попытка
			// загрузить организацию
			ИмяОчереди = "Org_base2";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьОрганизацию(ОтветноеСообщение);
			КонецЦикла;
			
			// загрузить подразделения
			ИмяОчереди = "Str_base2";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьПодразделение(ОтветноеСообщение);
			КонецЦикла;
			
			// загрузить пользователей
			ИмяОчереди = "User_base2";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьПользователя(ОтветноеСообщение);
			КонецЦикла;
			
			// загрузить склады
			ИмяОчереди = "Store_base2";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьСклад(ОтветноеСообщение);
			КонецЦикла;

			// загрузить номенклатуру
			ИмяОчереди = "RRI_Base2";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьНоменклатуру(ОтветноеСообщение);
			КонецЦикла;
			
			// загрузить потребность
			ИмяОчереди = "order";
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
		    ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				КлиентКомпоненты.BasicAck();
				СоздатьПотребность(ОтветноеСообщение);
			КонецЦикла;
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьНоменклатуру(ОтветноеСообщение) 
	КлючЗначение = СтрРазделить(ОтветноеСообщение,",");
	Ref  = СокрЛП(Сред (КлючЗначение[1],11,36));
	Name = Сред (КлючЗначение[5],19,СтрДлина(КлючЗначение[5])-25);
	Если Найти(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйСпр = Справочники.Номенклатура.СоздатьЭлемент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     			
		Ссылка = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйСпр.УстановитьСсылкуНового(Ссылка);  
		НовыйСпр.Наименование = Name;
		НовыйСпр.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьОрганизацию(ОтветноеСообщение) 
	КлючЗначение = СтрРазделить(ОтветноеСообщение,",");
	Ref  = СокрЛП(Сред (КлючЗначение[0],25,36));
	Name = Сред (КлючЗначение[3],19,СтрДлина(КлючЗначение[3])-25);
	Если Найти(Справочники.Организация.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйСпр = Справочники.Организация.СоздатьЭлемент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     			
		Ссылка = Справочники.Организация.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйСпр.УстановитьСсылкуНового(Ссылка);  
		НовыйСпр.Наименование = Name;
		НовыйСпр.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьПодразделение(ОтветноеСообщение) 
	КлючЗначение = СтрРазделить(ОтветноеСообщение,",");
	Ref   = СокрЛП(Сред (КлючЗначение[1],11,36));
	Name  = Сред (КлючЗначение[7],19,СтрДлина(КлючЗначение[7])-19); 
	Owner = СокрЛП(Сред (КлючЗначение[4],14,36));
	Если Найти(Справочники.Подразделение.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйСпр = Справочники.Подразделение.СоздатьЭлемент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     			
		Ссылка = Справочники.Подразделение.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйСпр.УстановитьСсылкуНового(Ссылка);  
		НовыйСпр.Наименование = Name; 
		НовыйСпр.Владелец = Справочники.Организация.ПолучитьСсылку(Новый Уникальныйидентификатор(Owner));
		НовыйСпр.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьПользователя(ОтветноеСообщение) 
	КлючЗначение = СтрРазделить(ОтветноеСообщение,",");
	Ref   = СокрЛП(Сред (КлючЗначение[0],25,36));
	Name  = Сред (КлючЗначение[3],19,СтрДлина(КлючЗначение[3])-19); 
	Str   = СокрЛП(Сред (КлючЗначение[4],21,36));
	Если Найти(Справочники.Пользователь.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйСпр = Справочники.Пользователь.СоздатьЭлемент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     			
		Ссылка = Справочники.Пользователь.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйСпр.УстановитьСсылкуНового(Ссылка);  
		НовыйСпр.Наименование = Name; 
		НовыйСпр.Подразделение = Справочники.Подразделение.ПолучитьСсылку(Новый Уникальныйидентификатор(Str));
		НовыйСпр.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьСклад(ОтветноеСообщение) 
	КлючЗначение = СтрРазделить(ОтветноеСообщение,",");
	Ref  = СокрЛП(Сред (КлючЗначение[1],11,36));
	Name = Сред (КлючЗначение[5],19,СтрДлина(КлючЗначение[5])-25);
	Если Найти(Справочники.Склад.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйСпр = Справочники.Склад.СоздатьЭлемент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     			
		Ссылка = Справочники.Склад.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйСпр.УстановитьСсылкуНового(Ссылка);  
		НовыйСпр.Наименование = Name;
		НовыйСпр.Записать();
	КонецЕсли;
КонецПроцедуры 

Процедура СоздатьПотребность(ОтветноеСообение)
	КлючЗначение = СтрРазделить(ОтветноеСообение,",");
	Ref       = СокрЛП(Сред (КлючЗначение[0],25,36));
	date      = Сред (КлючЗначение[2],12,19);
	Code      = Сред (КлючЗначение[3],14,9);   
	Орг       = Сред (КлючЗначение[5],19,36); 
	Заказчик  = Сред (КлючЗначение[6],16,36);
	DD        = Сред (КлючЗначение[7],20,19);
	Status    = Сред (КлючЗначение[8],14,СтрДлина(КлючЗначение[8])-14);
	Store     = Сред (КлючЗначение[9],13,36);
	Если Найти(Документы.ПотребностьВТМЦ.ПолучитьСсылку(Новый УникальныйИдентификатор(Ref)), "Объект не найден") > 0 тогда
		НовыйДок = Документы.ПотребностьВТМЦ.СоздатьДокумент();
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Ref);     
		
		Ссылка = Документы.ПотребностьВТМЦ.ПолучитьСсылку(УникальныйИдентификатор);
		НовыйДок.УстановитьСсылкуНового(Ссылка);
		СтроковаяДата = СтрЗаменить(date , "-","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
		НоваяДата = Дата(СтроковаяДата );
		НовыйДок.дата = НоваяДата; 
		
		СтроковаяДата = СтрЗаменить(DD , "-","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
		СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
		НоваяДата = Дата(СтроковаяДата );
		НовыйДок.ЖелаемаяДата = НоваяДата; 
		
		НовыйДок.Организация = Справочники.Организация.ПолучитьСсылку(Новый УникальныйИдентификатор(Орг));   
		НовыйДок.Заказчик    = Справочники.Пользователь.ПолучитьСсылку(Новый УникальныйИдентификатор(Заказчик));  
		НовыйДок.Статус      = Перечисления.СтатусыЗаявки[Status];
		НовыйДок.Склад       = Справочники.Склад.ПолучитьСсылку(Новый УникальныйИдентификатор(Орг));   
		
		НПП = 10;
		Пока НПП < КлючЗначение.Количество() Цикл
			НС = НовыйДок.СписокТМЦ.Добавить(); 
			Если НПП = 10 тогда
				НоменклатураЗнач = Сред(КлючЗначение[НПП],39,36);
			Иначе
				НоменклатураЗнач = Сред(КлючЗначение[НПП],23,36)
			КонецЕсли;
			УИДНом = Новый УникальныйИдентификатор(НоменклатураЗнач);
			НС.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УИДНом);
			НПП = НПП + 1; 
			Если НПП = КлючЗначение.Количество()-1 тогда
				НС.Количество = Сред (КлючЗначение[13],17,СтрДлина(КлючЗначение[13])-28);
			Иначе
				НС.Количество = Число(Сред (КлючЗначение[НПП],17,СтрДлина(КлючЗначение[НПП])-19));
			КонецЕсли;
			НПП = НПП + 1;
		КонецЦикла;
		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры
	